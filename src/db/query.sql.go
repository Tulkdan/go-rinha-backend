// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAllPeople = `-- name: CountAllPeople :one
SELECT COUNT(*) as qtt
FROM people
`

func (q *Queries) CountAllPeople(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllPeople)
	var qtt int64
	err := row.Scan(&qtt)
	return qtt, err
}

const createPerson = `-- name: CreatePerson :one
INSERT INTO people (id, name, nickname, birthdate, stacks)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, nickname, birthdate, stacks
`

type CreatePersonParams struct {
	ID        pgtype.UUID
	Name      pgtype.Text
	Nickname  pgtype.Text
	Birthdate pgtype.Timestamp
	Stacks    []string
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (Person, error) {
	row := q.db.QueryRow(ctx, createPerson,
		arg.ID,
		arg.Name,
		arg.Nickname,
		arg.Birthdate,
		arg.Stacks,
	)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Nickname,
		&i.Birthdate,
		&i.Stacks,
	)
	return i, err
}

const getPerson = `-- name: GetPerson :one
SELECT id, name, nickname, birthdate, stacks
FROM people
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPerson(ctx context.Context, id pgtype.UUID) (Person, error) {
	row := q.db.QueryRow(ctx, getPerson, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Nickname,
		&i.Birthdate,
		&i.Stacks,
	)
	return i, err
}

const searchPerson = `-- name: SearchPerson :many
SELECT
    id
    , name
    , nickname
    , birthdate
    , stacks
FROM people
WHERE LOWER(name) LIKE '%' || $1 || '%'
   OR LOWER(nickname) LIKE '%' || $2 || '%'
   OR LOWER(stacks) LIKE '%' || $3 || '%'
`

type SearchPersonParams struct {
	Column1 pgtype.Text
	Column2 pgtype.Text
	Column3 pgtype.Text
}

func (q *Queries) SearchPerson(ctx context.Context, arg SearchPersonParams) ([]Person, error) {
	rows, err := q.db.Query(ctx, searchPerson, arg.Column1, arg.Column2, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Nickname,
			&i.Birthdate,
			&i.Stacks,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
